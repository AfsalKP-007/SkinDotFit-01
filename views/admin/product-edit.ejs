<%- include("../../views/partials/admin/header") %>
<head>
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css"
  />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
  />

  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css"
  />
  <style>
    /* General Styling */
    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }
    :root {
      --primary-color: #1e90ff;
      --secondary-color: #2d3436;
      --success-color: #00b894;
      --danger-color: #d63031;
      --info-color: #0984e3;
      --light-gray: #dfe6e9;
      --background-color: #f5f6fa;
      --white: #ffffff;
      --shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
      --transition: all 0.3s ease;
    }

    .error-message {
      color: red;
      font-size: 0.875rem;
    }

    /* Main Section Styling */
    .content-main {
      padding: 3rem 2rem;
    }

    .content-header {
      margin-bottom: 2rem;
    }

    .content-title {
      font-size: 2rem;
      font-weight: bold;
    }

    /* Form Styling */
    .form-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-group label {
      font-weight: 600;
      font-size: 1.1rem;
      margin-bottom: 0.5rem;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 0.75rem;
      font-size: 1rem;
      border-radius: 8px;
      border: 1px solid #ddd;
    }

    .form-group input[type="number"] {
      -moz-appearance: textfield;
    }

    .form-group select {
      cursor: pointer;
    }

    .form-actions {
      display: flex;
      justify-content: flex-start;
      margin-top: 1.5rem;
    }

    .form-actions button {
      background-color: #007bff;
      color: white;
      padding: 0.75rem 1.5rem;
      font-size: 1.125rem;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    .form-actions button:hover {
      background-color: #0056b3;
    }

    /* Image Preview Styling */
    .image-preview {
      max-width: 100%;
      max-height: 200px;
      border: 1px solid #ddd;
      margin-top: 10px;
      border-radius: 8px;
    }

    .image-upload-container {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .thumbnail {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .thumbnail img {
      width: 50px;
      height: 50px;
      object-fit: cover;
      border-radius: 50%;
      margin-right: 10px;
    }
  </style>
</head>

<section class="content-main">
  <div class="content-header">
    <h2 class="content-title"> Edit Product</h2>
  </div>
  <form id="productEditForm" method="POST" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data">
  <div class="container">
    
    <div class="row mt-3">
      
      <div class="col-md-4">
        <label for="name">Name</label>
        <input type="text" class="form-control" id="name" name="name" placeholder="Enter product name" value="<%= product.name %>">
        <div id="name-error" class="error-message"></div>
      </div>

      <div class="col-md-4">
        <label for="category">Category</label>
        <select class="form-control" id="category" name="category" >
          
              <% for(let i=0; i < cat.length; i++) { %>
                <option value="<%= cat[i]._id %>" <%=product.category.equals(cat[i]._id) ? 'selected' : '' %>>
                    <%= cat[i].name %>
                </option>
            <% } %>


        </select>
        <div id="category-error" class="error-message"></div>
      </div>

    </div>
  
    <div class="row mt-3">
      <div class="col-md-4">
        <label for="description">Description</label>
        <input type="text" class="form-control" id="description" name="description" placeholder="Enter description" value="<%= product.description %>">
        <div id="description-error" class="error-message"></div>
      </div>
      <div class="col-md-4">
        <label for="brand">Brand</label>
        <input type="text" class="form-control" id="brand" name="brand" placeholder="Enter brand"  value="<%= product.brand %>">
        <div id="brand-error" class="error-message"></div>
      </div>
      <div class="col-md-4">
        <label for="regularPrice">Regular Price</label>
        <input type="number" class="form-control"  name="regularPrice"  id="regularPrice" placeholder="Enter regular price"   value="<%= product.regularPrice %>"  >
        <div id="regularPrice-error" class="error-message"></div>
      </div>
      <div class="col-md-4">
        <label for="salePrice">Sale Price</label>
        <input type="text" class="form-control" name="salePrice" id="salePrice" placeholder="Enter sale price" value="<%= product.salePrice %>" >
        <div id="salePrice-error" class="error-message"></div>
      </div>
    </div>
  
    <div class="row mt-3">
      <div class="col-md-4">
        <label for="stock">Stock</label>
        <input type="text" class="form-control" id="stock" name="stock" placeholder="Enter stock"  value="<%= product.stock %>">
        <div id="stock-error" class="error-message"></div>
      </div>
    </div>
  </div>
  
  <hr>
   
  <div class="card p-3">
    <h4>Product Images</h4>
    <div id="photos-error" class="error-message"></div>
    
    
  <div class="row">

    <% for(let i = 0; i < 4; i++) { %>
      <div class="col-md-3 mb-3">
        <div class="card">
          <% if(product.photos[i]) { %>
            <img src="/<%= product.photos[i] %>" class="card-img-top" alt="Product Image">
            <div class="card-body">
              <!-- Change Button with File Input -->
              <input type="file" name="image<%= i+1 %>" accept="image/*" class="form-control image-input" data-index="<%= i %>" onchange="changeImage(event, '<%= product._id %>', <%= i %>)">
            </div>
          <% } else { %>
            <div class="card-body">
              <div class="image-upload-container">
                <input type="file" name="image<%= i+1 %>" accept="image/*" class="form-control image-input" data-index="<%= i %>" onchange="previewImage(event, <%= i %>)">
                <div class="preview-container" style="margin-top: 10px; display: none;">
                  <img id="preview<%= i %>" src="#" alt="Image preview" style="max-width: 100%; height: auto;">
                </div>
                <input type="hidden" name="croppedImage<%= i+1 %>" id="croppedImage<%= i+1 %>" value="">
              </div>
            </div>
          <% } %>
        </div>
      </div>
    <% } %>


  </div>

  <div class="form-actions d-flex justify-content-end">
    <button type="submit" class="btn btn-primary">Update Product</button>
  </div>

  </form>

</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>


<script>


function changeImage(event, productId, index) {
  const file = event.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function (e) {
      document.querySelector(`.card-img-top[src="/${product.photos[index]}"]`).src = e.target.result;
    };
    reader.readAsDataURL(file);

    // Optional: Send the updated image to the server via AJAX
    const formData = new FormData();
    formData.append("image", file);
    formData.append("productId", productId);
    formData.append("index", index);

    fetch(`/admin/changeImage`, {
      method: "POST",
      body: formData,
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        console.log("Image changed successfully");
      } else {
        console.error("Failed to update image");
      }
    });
  }
}



  let croppers = {};

  function previewImage(event, index) {
    const input = event.target;
    const previewContainer =
    input.parentElement.querySelector(".preview-container");
    const preview = document.getElementById(`preview${index}`);
    const errorDiv = document.getElementById(`image${index}-error`);

    // Reset previous states
    previewContainer.style.display = "none";
    errorDiv.textContent = "";
    if (croppers[index]) {
      croppers[index].destroy();
      delete croppers[index];
    }

    if (input.files && input.files[0]) {
      const file = input.files[0];
      // Validation
      const validImageTypes = [
        "image/jpeg",
        "image/png",
        "image/gif",
        "image/bmp",
        "image/webp",
      ];
      const maxSize = 5 * 1024 * 1024; // 5MB

      if (!validImageTypes.includes(file.type)) {
        errorDiv.textContent =
          "Please select a valid image file (JPEG, PNG, GIF, BMP, or WebP)";
        input.value = "";
        return;
      }

      if (file.size > maxSize) {
        errorDiv.textContent = "Image file size must be less than 5MB";
        input.value = "";
        return;
      }

      const reader = new FileReader();
      reader.onload = function (e) {
        preview.src = e.target.result;
        previewContainer.style.display = "block";

        croppers[index] = new Cropper(preview, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 1,
          ready: function () {
            this.cropper.crop();
          },
        });
      };
      reader.readAsDataURL(file);
    }
  }

  document.getElementById("productEditForm")
    .addEventListener("submit", function (e) {
      e.preventDefault();

      // Form validation
      
      let isValid = true;
      const requiredFields = [
        "name",
        "description",
        "brand",
        "regularPrice",
        "salePrice",
        "stock",
        "category"
      ];

      // Clear previous error messages
      document.addEventListener("DOMContentLoaded", () => {
      requiredFields.forEach((field) => {
        document.getElementById(`${field}-error`).textContent = "";
      });
    });

    
     requiredFields.forEach((field) => {
      const input = document.querySelector(`input[name="${field}"], select[name="${field}"]`);

       if (!input || !input.value.trim()) {
           isValid = false;
           document.getElementById(`${field}-error`).textContent = "This field is required.";
          } else {
           document.getElementById(`${field}-error`).textContent = "";
           }
        });

      // Get price and stock values
      const stock = parseInt(document.getElementById("stock").value);
      const regularPrice = parseFloat( document.getElementById("regularPrice").value );
      const salePrice = parseFloat(document.getElementById("salePrice").value);

      // Validate stock
      if (stock < 0) {
        isValid = false;
        Swal.fire({
          title: "Invalid Stock!",
          text: "Stock cannot be less than zero",
          icon: "error",
          confirmButtonText: "OK",
        });
        document.getElementById("stock-error").textContent =
          "Stock cannot be less than zero";
        return;
      }

      // Validate regular price
      if (regularPrice <= 0) {
        isValid = false;
        Swal.fire({
          title: "Invalid Regular Price!",
          text: "Regular price must be greater than zero",
          icon: "error",
          confirmButtonText: "OK",
        });
        document.getElementById("regularPrice-error").textContent =
          "Regular price must be greater than zero";
        return;
      }

      // Validate sale price
      if (salePrice <= 0) {
        isValid = false;
        Swal.fire({
          title: "Invalid Sale Price!",
          text: "Sale price must be greater than zero",
          icon: "error",
          confirmButtonText: "OK",
        });
        document.getElementById("salePrice-error").textContent =
          "Sale price must be greater than zero";
        return;
      }

      // Validate sale price is not higher than regular price
      if (salePrice > regularPrice) {
        isValid = false;
        Swal.fire({
          title: "Invalid Price!",
          text: "Sale price cannot be higher than regular price",
          icon: "error",
          confirmButtonText: "OK",
        });
        document.getElementById("salePrice-error").textContent =
          "Sale price cannot be higher than regular price";
        return;
      }

     
      if (isValid) {
        
        const formData = new FormData(this);

        fetch(this.action, {
            method: 'POST',
            body: formData
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                title: "Success!",
                text: "Product Updated successfully",
                icon: "success",
                confirmButtonText: "OK",
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.href = "/admin/products";
                }
              });
            } else {
              Swal.fire({
                title: "Error!",
                text:
                  data.message || "An error occurred while Updaing the product",
                icon: "error",
                confirmButtonText: "OK",
              });
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            Swal.fire({
              title: "Error!",
              text: "An unexpected error occurred",
              icon: "error",
              confirmButtonText: "OK",
            });
          });
      }
    });

  // Add real-time validation for stock, regular price, and sale price
  document.getElementById("stock").addEventListener("input", function () {
    const quantity = parseInt(this.value);
    if (quantity < 0) {
      document.getElementById("stock-error").textContent =
        "Stock cannot be less than zero";
    } else {
      document.getElementById("stock-error").textContent = "";
    }
  });

  document
    .getElementById("regularPrice")
    .addEventListener("input", function () {
      const regularPrice = parseFloat(this.value);
      const salePrice = parseFloat(document.getElementById("salePrice").value);

      if (regularPrice <= 0) {
        document.getElementById("regularPrice-error").textContent =
          "Regular price must be greater than zero";
      } else {
        document.getElementById("regularPrice-error").textContent = "";
      }

      // Check sale price relationship
      if (salePrice && salePrice > regularPrice) {
        document.getElementById("salePrice-error").textContent =
          "Sale price cannot be higher than regular price";
      } else {
        document.getElementById("salePrice-error").textContent = "";
      }
    });

  document.getElementById("salePrice").addEventListener("input", function () {
    const salePrice = parseFloat(this.value);
    const regularPrice = parseFloat(
      document.getElementById("regularPrice").value
    );

    if (salePrice <= 0) {
      document.getElementById("salePrice-error").textContent =
        "Sale price must be greater than zero";
    } else if (regularPrice && salePrice > regularPrice) {
      document.getElementById("salePrice-error").textContent =
        "Sale price cannot be higher than regular price";
    } else {
      document.getElementById("salePrice-error").textContent = "";
    }
  });
</script>

<%- include("../../views/partials/admin/footer") %>
